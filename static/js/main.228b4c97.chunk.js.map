{"version":3,"sources":["Basic.js","Experience.js","Skills.js","Education.js","Certification.js","App.js","serviceWorker.js","index.js"],"names":["Basic","data","basicInfo","map","bs","i","key","name","role","email","mobile","Component","Experience","id","experience","ex","desg","desc","Skills","skills","sk","Name","per","Education","education","ed","degree","institute","percentage","year","Certification","certification","crt","crse","cfd","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m7DA0BeA,E,uKAnBP,OACI,6BAEQC,EAAKC,UAAUC,KAAI,SAACC,EAAGC,GACnB,OACI,yBAAKC,IAAKD,GACN,4BAAKD,EAAGG,MACR,8BAAOH,EAAGI,MAAY,6BACtB,8BAAOJ,EAAGK,OAAa,6BACvB,8BAAOL,EAAGM,iB,GAbtBC,aCuBLC,G,6KAnBP,OACI,yBAAKC,GAAG,OAEAZ,EAAKa,WAAWX,KAAI,SAACY,EAAGV,GACpB,OACI,yBAAKC,IAAKD,GACN,wBAAIQ,GAAG,MAAME,EAAGC,MAChB,uBAAGH,GAAG,MACN,8BAAOE,EAAGE,gB,GAZjBN,cCyBVO,E,uKArBP,OACI,2BAAOL,GAAG,MACN,wBAAIA,GAAG,MACH,wCACA,2CAGAZ,EAAKkB,OAAOhB,KAAI,SAACiB,EAAGf,GAChB,OACI,wBAAIC,IAAKD,GACL,4BAAKe,EAAGC,MACR,4BAAKD,EAAGE,c,GAfnBX,aC6BNY,E,uKAzBX,OACI,2BAAOV,GAAG,OACN,wBAAIA,GAAG,MACH,sCACA,yCACA,0CACA,qCAGAZ,EAAKuB,UAAUrB,KAAI,SAACsB,EAAGpB,GACnB,OACI,wBAAIC,IAAKD,GACL,4BAAKoB,EAAGC,QACR,4BAAKD,EAAGE,WACR,4BAAKF,EAAGG,YACR,4BAAKH,EAAGI,e,GAnBZlB,aCkCTmB,E,uKA9BX,OACI,6BAEQ7B,EAAK8B,cAAc5B,KAAI,SAAC6B,EAAI3B,GACxB,OACI,yBAAKC,IAAKD,GACN,wBAAIQ,GAAG,MAAMmB,EAAIC,MACjB,uBAAGpB,GAAG,MAYF,8BAAOmB,EAAIE,e,GAvBfvB,aC0CbwB,E,uKAZX,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,OAAM,kBAAC,EAAD,OACrB,yBAAKA,UAAU,MAAK,kBAAC,EAAD,OACpB,6BAAK,kBAAC,EAAD,OACL,yBAAKA,UAAU,MAAK,kBAAC,EAAD,OACpB,yBAAKA,UAAU,OAAM,kBAAC,EAAD,Y,GAVXzB,aCjBE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.228b4c97.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport data from \"./data/data\";\r\n\r\nclass Basic extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n                {\r\n                    data.basicInfo.map((bs,i) => {\r\n                        return(\r\n                            <div key={i}>\r\n                                <h2>{bs.name}</h2>\r\n                                <span>{bs.role}</span><br/>\r\n                                <span>{bs.email}</span><br/>\r\n                                <span>{bs.mobile}</span>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Basic;\r\n","import React, { Component } from 'react';\r\nimport data from \"./data/data\";\r\n\r\nclass Experience extends Component\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div id=\"exp\">\r\n                {\r\n                    data.experience.map((ex,i) => {\r\n                        return(\r\n                            <div key={i}> \r\n                                <h2 id=\"hh\">{ex.desg}</h2>\r\n                                <p id=\"sp\">\r\n                                <span>{ex.desc}</span>\r\n                                </p>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Experience;\r\n","import React, { Component } from 'react';\r\nimport data from \"./data/data\";\r\n\r\nclass Skills extends Component\r\n{\r\n    render()\r\n    {  \r\n        return (\r\n            <table id=\"tb\">\r\n                <tr id=\"tt\">\r\n                    <th>Language</th>\r\n                    <th>Percentage</th>\r\n                </tr>\r\n                {\r\n                    data.skills.map((sk,i) => {\r\n                        return(\r\n                            <tr key={i}>\r\n                                <td>{sk.Name}</td> \r\n                                <td>{sk.per}</td>\r\n                            </tr>\r\n                        );\r\n                    })\r\n                }\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Skills;\r\n","import React, { Component } from 'react';\r\nimport data from \"./data/data\";\r\n\r\nclass Education extends Component\r\n{\r\n    render()\r\n    {  \r\n    return (\r\n        <table id=\"edt\">\r\n            <tr id=\"tt\">\r\n                <th>Degree</th>\r\n                <th>Institute</th>\r\n                <th>Percentage</th>\r\n                <th>Year</th>\r\n            </tr>\r\n            {\r\n                data.education.map((ed,i) => {\r\n                    return(\r\n                        <tr key={i}>\r\n                            <td>{ed.degree}</td> \r\n                            <td>{ed.institute}</td>\r\n                            <td>{ed.percentage}</td>\r\n                            <td>{ed.year}</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            }\r\n        </table>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Education;\r\n","import React, { Component } from 'react';\r\nimport data from \"./data/data\";\r\n\r\nclass Certification extends Component\r\n{\r\n    render()\r\n    {  \r\n    return (\r\n        <div>\r\n            {\r\n                data.certification.map((crt,i) => {\r\n                    return(\r\n                        <div key={i}> \r\n                            <h2 id=\"hh\">{crt.crse}</h2>\r\n                            <p id=\"sp\">\r\n                                {/* <span>\r\n                                    {\r\n                                        crt.cfd.map((c,i) => {\r\n                                        return(\r\n                                            <div key= {i}>\r\n                                                <li>{c.num}</li>\r\n                                            </div>\r\n                                        );\r\n                                    })\r\n                                    }\r\n                                </span> */}\r\n                                <span>{crt.cfd}</span>\r\n                            </p>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Certification;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport Basic from './Basic';\nimport './App.css';\nimport Experience from './Experience';\nimport Skills from './Skills';\nimport Education from './Education';\nimport Certification from './Certification';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\nclass App extends Component\n{\n  render()\n  {\n    return(\n      <div className=\"frst\">\n        <div className=\"bsc\"><Basic></Basic></div>\n        <div className=\"sk\"><Skills></Skills></div>\n        <div><Experience></Experience></div>\n        <div className=\"ed\"><Education></Education></div>\n        <div className=\"crt\"><Certification></Certification></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}